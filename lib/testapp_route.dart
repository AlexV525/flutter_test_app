// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************
// ignore_for_file: argument_type_not_assignable

import 'package:flutter/widgets.dart';

import 'pages/custom_page_indicator_page.dart';
import 'pages/looks_like_sliver_appbar.dart';
import 'pages/test_struct_height_issue.dart';
import 'pages/test_tabbar_view_page.dart';
import 'pages/textfield_as_fab_page.dart';
import 'pages/will_pop_scope_page.dart';

RouteResult getRouteResult({String name, Map<String, dynamic> arguments}) {
  arguments = arguments ?? const <String, dynamic>{};
  switch (name) {
    case '/custom-page-view-indicator-page':
      return RouteResult(
        name: name,
        widget: CustomPageViewIndicatorPage(),
        routeName: '自定义pageview indicator测试页',
      );
    case '/looks-like-sliver-appbar-page':
      return RouteResult(
        name: name,
        widget: LooksLikeSliverAppBarPage(),
        routeName: 'SliverAppBar测试页',
      );
    case '/test-stack-tabbarview-page':
      return RouteResult(
        name: name,
        widget: TestTabBarViewPage(),
        routeName: '测试TabBarView',
      );
    case '/test-struct-height-issue-page':
      return RouteResult(
        name: name,
        widget: TestStructHeightIssuePage(),
        routeName: 'StructStyle issue test',
      );
    case '/text-field-in-floating-action-button-page':
      return RouteResult(
        name: name,
        widget: TextFieldInFloatingActionButtonPage(),
        routeName: 'TextField与FAB测试页',
      );
    case '/will-pop-scope-page':
      return RouteResult(
        name: name,
        widget: WillPopScopePage(),
        routeName: 'pop拦截测试页',
      );
    default:
      return const RouteResult(name: 'flutterCandies://notfound');
  }
}

class RouteResult {
  const RouteResult({
    @required this.name,
    this.widget,
    this.showStatusBar = true,
    this.routeName = '',
    this.pageRouteType,
    this.description = '',
    this.exts,
  });

  /// The name of the route (e.g., "/settings").
  ///
  /// If null, the route is anonymous.
  final String name;

  /// The Widget return base on route
  final Widget widget;

  /// Whether show this route with status bar.
  final bool showStatusBar;

  /// The route name to track page
  final String routeName;

  /// The type of page route
  final PageRouteType pageRouteType;

  /// The description of route
  final String description;

  /// The extend arguments
  final Map<String, dynamic> exts;
}

enum PageRouteType {
  material,
  cupertino,
  transparent,
}
